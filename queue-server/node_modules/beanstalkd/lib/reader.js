'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YamlReader = exports.BasicReader = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class BasicReader {
  constructor(expectation) {
    this.expectation = expectation;
    this.remainder = new Buffer(0);
  }

  parseData(data) {
    return data;
  }

  handle(protocol, data, resolve, reject) {
    var _protocol$parseReply = protocol.parseReply(Buffer.concat([this.remainder, data])),
        _protocol$parseReply2 = _slicedToArray(_protocol$parseReply, 2);

    let remainder = _protocol$parseReply2[0],
        result = _protocol$parseReply2[1];


    if (remainder && !result) {
      this.remainder = remainder;
      return;
    } else {
      this.remainder = new Buffer(0);
    }

    if (result.reply === this.expectation) {
      let args = [],
          spec = protocol.replyMap[result.reply];

      if (spec) {
        let bytes = spec.args.indexOf('bytes');
        args = spec.args.map(arg => result.args[arg]);
        if (bytes !== -1) {
          args.splice(bytes, 1);
          args[args.length - 1] = this.parseData(args[args.length - 1]);
        }
      }
      resolve(args.length > 1 ? args : args[0]);
      return remainder || new Buffer(0);
    } else {
      reject(new Error(result.reply));
      return remainder || new Buffer(0);
    }
  }
}

exports.BasicReader = BasicReader;
class YamlReader extends BasicReader {
  parseData(data) {
    return _jsYaml2.default.load(data.toString());
  }
}
exports.YamlReader = YamlReader;